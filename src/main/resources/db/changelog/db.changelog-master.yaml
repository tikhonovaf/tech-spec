databaseChangeLog:
  - changeSet:
      id: deep2000-demo-2025-05-08-01-Create hibernate_sequence
      author: Arkadiy.Tikhonov
      sql:
        CREATE SEQUENCE IF NOT EXISTS hibernate_sequence START WITH  1000;
        ;

  - changeSet:
      id: techspec-demo-2025-05-08-02-Create table users
      author: Arkadiy.Tikhonov
      sql:
        CREATE TABLE IF NOT EXISTS public.users (
        id bigint NOT NULL,
        first_name character varying(100) COLLATE pg_catalog."default",
        last_name character varying(100) COLLATE pg_catalog."default",
        second_name character varying(100) COLLATE pg_catalog."default",
        email character varying(100) COLLATE pg_catalog."default",
        phone character varying(100) COLLATE pg_catalog."default",
        telegram character varying(100) COLLATE pg_catalog."default",
        CONSTRAINT pk_users PRIMARY KEY (id)
        );

        INSERT INTO users (id, first_name,last_name, second_name, email) VALUES
        (1, 'Иванов', 'Иван', 'Иванович', 'ivanovII@privmail.ru'),
        (2, 'Петров', 'Петр', 'Петрович', 'petrovpp@privmail.ru'),
        (3, 'Сергеев', 'Сергей', 'Сергеевич', 'sergeevss@privmail.ru'),
        (4, 'Сергеев', 'Петр', 'Иванович', 'sergeevpi@privmail.ru'),
        (5, 'Сергеев', 'Иван', 'Петрович', 'sergeevip@privmail.ru');

      rollback:
        DROP TABLE IF EXISTS users;

  - changeSet:
      id: techspec-demo-2025-05-08-03-Create table services
      author: Arkadiy.Tikhonov
      sql:
        CREATE TABLE IF NOT EXISTS services (
        id bigint NOT NULL,
        name character varying(100) COLLATE pg_catalog."default",
        CONSTRAINT pk_services PRIMARY KEY (id)
        );
      
        INSERT INTO services (id, name) VALUES
        (1, 'YouTube Premium'),
        (2, 'VK Музыка'),
        (3, 'Яндекс.Плюс'),
        (4, 'Netflix'),
        (5, 'Amazon Music'),
        (6, 'Spotify');

      rollback:
        DROP TABLE IF EXISTS services;

  - changeSet:
      id: techspec-demo-2025-04-19-04-Create table subscriptions
      author: Arkadiy.Tikhonov
      sql:
        CREATE TABLE IF NOT EXISTS subscriptions (
        id bigint NOT NULL,
        user_id bigint NOT NULL,
        service_id bigint NOT NULL,
        CONSTRAINT pk_subscriptions PRIMARY KEY (id),
        CONSTRAINT fk_users FOREIGN KEY (user_id)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE SET NULL
        ON DELETE SET NULL,
        CONSTRAINT fk_services FOREIGN KEY (service_id)
        REFERENCES public.services (id) MATCH SIMPLE
        ON UPDATE SET NULL
        ON DELETE SET NULL
        );

        CREATE UNIQUE INDEX IF NOT EXISTS idx_subscriptions_user_service
           ON public.subscriptions USING btree
             (user_id ASC NULLS LAST, service_id ASC NULLS LAST)
            TABLESPACE pg_default;

        INSERT INTO subscriptions (id, user_id, service_id) VALUES
        (1, 1, 1),
        (2, 1, 3),
        (3, 2, 4),
        (4, 2, 2),
        (5, 3, 5),
        (6, 3, 6),
        (7, 4, 1),
        (8, 4, 3),
        (9, 5, 1),
        (10, 5, 5),
        (11, 5, 6);

      rollback:
        DROP TABLE IF EXISTS subscriptions;

  - changeSet:
      id: deep2000-demo-2025-05-09-01-Create view  subscriptions_view
      author: Arkadiy.Tikhonov
      sql:
        CREATE OR REPLACE VIEW public.subscriptions_view AS
        SELECT sub.id, 
        u.id as user_id, u.last_name, u.first_name, u.second_name, u.email,
        s.id as service_id, s.name AS service_name
        FROM subscriptions sub
        JOIN users u ON u.id = sub.user_id
        JOIN services s ON s.id = sub.service_id
        ;

  - changeSet:
      id: deep2000-demo-2025-05-09-02-Create view  subscriptions_top_view
      author: Arkadiy.Tikhonov
      sql:
        CREATE OR REPLACE VIEW public.subscriptions_top_view AS
          WITH R AS
          (SELECT service_id, count(*) rate
          FROM subscriptions sub
          GROUP BY service_id)
        SELECT s.id, s.name, r.rate
        FROM services s
        JOIN R on R.service_id =  s.id
        ORDER BY r.rate DESC
        LIMIT 3;
